heat_template_version: 2017-02-24
description: Complete stack for big data analytics

parameters:
    
  image_to_use:
    type: string
    label: Image name or ID
    description: Image used for all nodes in the kafka cluster (CentOS7)
    default: fb2906c4-56a1-45a1-9041-485716cb7016 

  flavor_to_use:
    type: string
    label: Flavor name 
    description: Flavor used for all nodes in the kafka cluster
    default: cldareapd.small

  key_name_user:
    type: string
    label: Public ssh key of one user.
    description: Public ssh key of one user.
    default: mbuto-desktop

  lan_id:
    type: string
    label: LAN Network ID of the tenant
    description: This parameter has been set with the id of the tenant LAN network.
    default: d68e615a-7716-4e95-a413-492339300b58

  wan_id:
    type: string
    label: WAN Network ID of the tenant
    description: This parameter has been set with the id of the tenant WAN network.
    default: a53d45ba-bc4b-43fd-982b-4960bc1fd26a

  lan_ipprefix:
    type: string
    label: "LAN IPv4 prefix"
    default: "10.64.48"

  lan_subnet_name:
    type: string
    label: LAN sub network of the tenant
    description: This parameter has been set with the name of the tenant LAN sub network.
    default: "sub-SMACT-lan"

  wan_subnet_name:
    type: string
    label: WAN sub network of the tenant
    description: This parameter has been set with the name of the tenant WAN sub network.
    default: "sub-SMACT-wan"

  nameserver_list:
    type: string
    label: Name server ip list
    description: Name server ip list
    default:  "192.84.143.31 192.84.143.16"

  nifi_admin_id:
    type: string
    label: Portal admin id
    description: Portal admin id
    default: "CN=Paolo Andreetto andreett@infn.it, O=Istituto Nazionale di Fisica Nucleare, C=IT, DC=tcs, DC=terena, DC=org"

  nifi_fixed_ip:
    type: string
    label: Portal fixed IP address
    description: Portal fixed IP address
    default:  "10.63.13.60"

  nifi_fip_id:
    type: string
    label: ID of the floating ip for the portal
    description: ID of the floating ip for the portal
    default: "14716383-635d-46a1-afcd-5a16925153b3"

resources:
  
  root_pw:
   type: OS::Heat::RandomString
   properties:
      length: 8 

#  secgroup_bigstack_sg:
#    type: OS::Neutron::SecurityGroup
#    properties:
#      description: "Access to big data stack services for all VM in this security group"
#      name: "secgroup-bigdata-stack"
#      rules: [
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "remote_mode": remote_ip_prefix, "protocol": ICMP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 22, "port_range_max": 22, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 2181, "port_range_max": 2181, "remote_mode": remote_ip_prefix, "protocol": TCP}, 
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 2888, "port_range_max": 2888, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 3888, "port_range_max": 3888, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 4040, "port_range_max": 4040, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 4400, "port_range_max": 4400, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 5050, "port_range_max": 5050, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 6066, "port_range_max": 6066, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 7077, "port_range_max": 7077, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 8080, "port_range_max": 8080, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 8081, "port_range_max": 8081, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 8443, "port_range_max": 8443, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 9000, "port_range_max": 9000, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 9092, "port_range_max": 9092, "remote_mode": remote_ip_prefix, "protocol": TCP}, 
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 50010, "port_range_max": 50090, "remote_mode": remote_ip_prefix, "protocol": TCP}
#      ]

  secgroup_bigstack_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Access to big data stack services for all VM in this security group"
      name: "secgroup-bigdata-stack-all"
      rules: [
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "remote_mode": remote_ip_prefix, "protocol": ICMP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 22, "port_range_max": 22, "remote_mode": remote_ip_prefix, "protocol": TCP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 1024, "port_range_max": 65535, "remote_mode": remote_ip_prefix, "protocol": TCP}
      ]

  kafka_node_0:
    type: http://artifacts.pd.infn.it/packages/SMACT/templates/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: kafka
      node_id: 70
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"

  kafka_node_1:
    type: http://artifacts.pd.infn.it/packages/SMACT/templates/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: kafka
      node_id: 71
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"

  kafka_node_2:
    type: http://artifacts.pd.infn.it/packages/SMACT/templates/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: kafka
      node_id: 72
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"

  hdfs_node_0:
    type: http://artifacts.pd.infn.it/packages/SMACT/templates/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: spark
      node_id: 80
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"

  hdfs_node_1:
    type: http://artifacts.pd.infn.it/packages/SMACT/templates/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: spark
      node_id: 81
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"

  hdfs_node_2:
    type: http://artifacts.pd.infn.it/packages/SMACT/templates/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: spark
      node_id: 82
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"

outputs:

  root_pw:
    description: root pwd to access to all VMs in spark cluster
    value: { get_resource: root_pw }


