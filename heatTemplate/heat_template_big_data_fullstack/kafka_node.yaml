heat_template_version: 2017-02-24

parameters:
  image_to_use:
    type: string
    label: Image name or ID
    description: Image used for all nodes in the kafka cluster

  flavor_to_use:
    type: string
    label: Flavor name 
    description: Flavor used for all nodes in the kafka cluster

  key_name_user:
    type: string
    label: Public ssh key of one user.
    description: Public ssh key of one user.

  avail_zone:
    type: string
    label: Availability Zone
    description: Availability Zone for the cluster
    default: "nova"

  net_host_prefix:
    type: string
    label: Prefix for the hostname of the cluster nodes
    description: Prefix for the hostname of the cluster nodes.
    default: "kafka-test"

  tenant_net_id:
    type: string
    label: Network ID of the tenant
    description: This parameter has been set with the id of the tenant network

  tenant_subnet_name:
    type: string
    label: Sub network of the tenant
    description: This parameter has been set with the name of the tenant sub network.

  nameserver_list:
    type: string
    label: Name server ip list
    description: Name server ip list

  node_id:
    type: number
    label: Node ID
    description: Node ID

  fixed_ip_list:
    type: string
    label: Fixed ip list for kafka nodes
    description: Fixed ip list for kafka nodes

  sec_group_id:
    type: string
    label: Security Group ID
    description: Security Group ID

  root_pw:
    type: string
    label: Root password
    description: Root password

resources:

  kafka_port:
    type: OS::Neutron::Port
    properties:
      name:
        str_replace:
            template: "kafka-port-$KAFKA_ID"
            params:
                $KAFKA_ID: { get_param: node_id }
      network_id: { get_param: tenant_net_id }
      fixed_ips:
        - {
            ip_address: { str_split: [ ' ', { get_param: fixed_ip_list }, { get_param: node_id } ] }, 
            subnet: { get_param: tenant_subnet_name }
          }
      security_groups: [ { get_param: sec_group_id }, ]

  kafka_instance:
    type: OS::Nova::Server
    properties:
      name:  
        str_replace:
            template: "kafka-instance-$KAFKA_ID"
            params:
                $KAFKA_ID: { get_param: node_id }
      key_name: { get_param: key_name_user }
      image: { get_param: image_to_use } 
      flavor: { get_param: flavor_to_use }
      admin_pass: { get_param: root_pw }
      availability_zone: { get_param: avail_zone }
      networks:
        - port: { get_resource: kafka_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            hostnamectl set-hostname <%HOST_PRE%>-0<%HOST_NUMBER%>.pd.infn.it
            cat > /etc/hosts << EOF
            127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
            ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
            EOF
            idx=0
            for ip_item in <%IP_LIST%> ; do
              echo "${ip_item} <%HOST_PRE%>-0${idx}.pd.infn.it <%HOST_PRE%>-0${idx}" >> /etc/hosts
              idx=$[$idx+1]
            done
            cat > /etc/resolv.conf << EOF
            search pd.infn.it
            nameserver <%IP_NS_LIST%>
            EOF
            yum -y install epel-release yum-priorities vim-enhanced wget w3m java-1.8.0-openjdk
            wget -O /tmp/kafka_2.11-1.1.0.tgz http://artifacts.pd.infn.it/packages/SMACT/misc/kafka_2.11-1.1.0.tgz
            mkdir -p <%BIGDATA_WD%>
            tar -C <%BIGDATA_WD%> -zxf /tmp/kafka_2.11-1.1.0.tgz
            mv <%BIGDATA_WD%>/kafka_2.11-1.1.0 <%BIGDATA_WD%>/kafka
            adduser <%BIGDATA_USR%>
            mkdir -p /var/lib/kafka/kafka-logs /var/cache/zookeeper /var/log/kafka
            chown <%BIGDATA_USR%>.<%BIGDATA_USR%> /var/lib/kafka/kafka-logs /var/cache/zookeeper /var/log/kafka
            ln -s /var/log/kafka <%BIGDATA_WD%>/kafka/log
            cat > <%BIGDATA_WD%>/kafka/config/server.properties << EOF
            broker.id=<%HOST_NUMBER%>
            num.network.threads=3
            num.io.threads=8
            socket.send.buffer.bytes=102400
            socket.receive.buffer.bytes=102400
            socket.request.max.bytes=104857600
            log.dirs=/var/lib/kafka/kafka-logs
            num.partitions=1
            num.recovery.threads.per.data.dir=1
            offsets.topic.replication.factor=1
            transaction.state.log.replication.factor=1
            transaction.state.log.min.isr=1
            log.retention.hours=168
            log.segment.bytes=1073741824
            log.retention.check.interval.ms=300000
            zookeeper.connect=localhost:2181
            zookeeper.connection.timeout.ms=6000
            group.initial.rebalance.delay.ms=0
            EOF
            cat > <%BIGDATA_WD%>/kafka/config/zookeeper.properties << EOF
            dataDir=/var/cache/zookeeper
            clientPort=2181
            tickTime=2000
            initLimit=5
            syncLimit=2
            EOF
            idx=0
            for ip_item in <%IP_LIST%> ; do
              echo "server.${idx}=<%HOST_PRE%>-0${idx}.pd.infn.it:2888:3888" >> <%BIGDATA_WD%>/kafka/config/zookeeper.properties
              idx=$[$idx+1]
            done
            echo <%HOST_NUMBER%> > /var/cache/zookeeper/myid
            cat > /usr/lib/systemd/system/zookeeper.service << EOF
            [Unit]
            Description=Zookeeper service

            [Service]
            ExecStart=/usr/sbin/runuser -s /bin/bash -c "<%BIGDATA_WD%>/kafka/bin/zookeeper-server-start.sh <%BIGDATA_WD%>/kafka/config/zookeeper.properties" -- <%BIGDATA_USR%>
            ExecStop=/usr/sbin/runuser -s /bin/bash -c "<%BIGDATA_WD%>/kafka/bin/zookeeper-server-stop.sh" -- <%BIGDATA_USR%>

            [Install]
            WantedBy=multi-user.target
            EOF
            cat > /usr/lib/systemd/system/kafka.service << EOF
            [Unit]
            Description=Kafka broker
            Wants=zookeeper.service
            After=zookeeper.service

            [Service]
            ExecStart=/usr/sbin/runuser -s /bin/bash -c "<%BIGDATA_WD%>/kafka/bin/kafka-server-start.sh <%BIGDATA_WD%>/kafka/config/server.properties" -- <%BIGDATA_USR%>
            ExecStop=/usr/sbin/runuser -s /bin/bash -c "<%BIGDATA_WD%>/kafka/bin/kafka-server-start.sh" -- <%BIGDATA_USR%>

            [Install]
            WantedBy=multi-user.target
            EOF
            echo "export PATH=$PATH:<%BIGDATA_WD%>/kafka/bin/" >> /etc/bashrc
            systemctl enable zookeeper kafka
          params:
            <%IP_NS_LIST%>:   { get_param: nameserver_list }
            <%IP_LIST%>:      { get_param: fixed_ip_list }
            <%HOST_NUMBER%>:  { get_param: node_id }
            <%HOST_PRE%>:     { get_param: net_host_prefix }
            <%BIGDATA_WD%>:   "/opt/bigdata"
            <%BIGDATA_USR%>:  "bigdatausr"

#
#  Simple tests
#    kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic mytopic
#    kafka-console-producer.sh --broker-list localhost:9092 --topic mytopic
#    kafka-topics.sh --list --zookeeper localhost:2181
#    kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic mytopic
#
