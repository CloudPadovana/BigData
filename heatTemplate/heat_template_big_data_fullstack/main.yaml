heat_template_version: 2017-02-24
description: Complete stack for big data analytics

parameters:
    
  image_to_use:
    type: string
    label: Image name or ID
    default: fb2906c4-56a1-45a1-9041-485716cb7016 

  flavor_to_use:
    type: string
    label: Flavor name 
    default: cldareapd.small

  key_name_user:
    type: string
    label: Public ssh key of one user.
    default: mbuto-desktop

  host_name:
    type: string
    label: "Server Hostname"
    default: "cld-smact-01.pd.infn.it"

  lan_id:
    type: string
    label: LAN Network ID of the tenant
    default: d68e615a-7716-4e95-a413-492339300b58

  wan_id:
    type: string
    label: WAN Network ID of the tenant
    default: a53d45ba-bc4b-43fd-982b-4960bc1fd26a

  lan_ipprefix:
    type: string
    label: "LAN IPv4 prefix"
    default: "10.64.48"

  wan_ipprefix:
    type: string
    label: "WAN IPv4 prefix"
    default: "10.63.13"

  lan_subnet_name:
    type: string
    label: LAN sub network of the tenant
    default: "sub-SMACT-lan"

  wan_subnet_name:
    type: string
    label: WAN sub network of the tenant
    default: "sub-SMACT-wan"

  nameserver_list:
    type: string
    label: Name server ip list
    default:  "192.84.143.31 192.84.143.16"

  nifi_admin_id:
    type: string
    label: Portal admin id
    default: "CN=Paolo Andreetto andreett@infn.it, O=Istituto Nazionale di Fisica Nucleare, C=IT, DC=tcs, DC=terena, DC=org"

  nifi_fip_id:
    type: string
    label: ID of the floating ip for the portal
    default: "14716383-635d-46a1-afcd-5a16925153b3"

  oidc_client_id:
    type: string
    label: OpenID Connect Client ID
    default: ""

  oidc_client_secret:
    type: string
    label: OpenID Connect Client secret
    default: ""

  oidc_idp_url:
    type: string
    label: OpenID Connect IdP metadata
    default: ""

resources:
  
  root_pw:
   type: OS::Heat::RandomString
   properties:
      length: 8 

#  secgroup_bigstack_sg:
#    type: OS::Neutron::SecurityGroup
#    properties:
#      description: "Access to big data stack services for all VM in this security group"
#      name: "secgroup-bigdata-stack"
#      rules: [
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "remote_mode": remote_ip_prefix, "protocol": ICMP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 22, "port_range_max": 22, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 2181, "port_range_max": 2181, "remote_mode": remote_ip_prefix, "protocol": TCP}, 
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 2888, "port_range_max": 2888, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 3888, "port_range_max": 3888, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 4040, "port_range_max": 4040, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 4400, "port_range_max": 4400, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 5050, "port_range_max": 5050, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 6066, "port_range_max": 6066, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 7077, "port_range_max": 7077, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 8080, "port_range_max": 8080, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 8081, "port_range_max": 8081, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 8443, "port_range_max": 8443, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 9000, "port_range_max": 9000, "remote_mode": remote_ip_prefix, "protocol": TCP},
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 9092, "port_range_max": 9092, "remote_mode": remote_ip_prefix, "protocol": TCP}, 
#        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 50010, "port_range_max": 50090, "remote_mode": remote_ip_prefix, "protocol": TCP}
#      ]

  secgroup_bigstack_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Access to big data stack services for all VM in this security group"
      name: "secgroup-bigdata-stack-all"
      rules: [
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "remote_mode": remote_ip_prefix, "protocol": ICMP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 22, "port_range_max": 22, "remote_mode": remote_ip_prefix, "protocol": TCP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 1024, "port_range_max": 65535, "remote_mode": remote_ip_prefix, "protocol": TCP}
      ]

  kafka_setup:
    type: OS::Heat::Value
    properties:
      type: json
      value: {
        "num.network.threads" : "3",
        "num.io.threads" : "8",
        "socket.send.buffer.bytes" : "102400",
        "socket.receive.buffer.bytes" : "102400",
        "socket.request.max.bytes" : "104857600",
        "num.partitions" : "1",
        "num.recovery.threads.per.data.dir" : "1",
        "offsets.topic.replication.factor" : "1",
        "transaction.state.log.replication.factor" : "1",
        "transaction.state.log.min.isr" : "1",
        "log.retention.hours" : "168",
        "log.segment.bytes" : "1073741824",
        "log.retention.check.interval.ms" : "300000",
        "zookeeper.connect" : "localhost:2181",
        "zookeeper.connection.timeout.ms" : "6000",
        "group.initial.rebalance.delay.ms" : "0"
      }

  kafka_node_0:
    type: http://artifacts.pd.infn.it/templates/SMACT/heat/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: kafka
      node_id: 70
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"
      kafka_config: { get_attr [ kafka_setup, value ] }

  kafka_node_1:
    type: http://artifacts.pd.infn.it/templates/SMACT/heat/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: kafka
      node_id: 71
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"
      kafka_config: { get_attr [ kafka_setup, value ] }

  kafka_node_2:
    type: http://artifacts.pd.infn.it/templates/SMACT/heat/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: kafka
      node_id: 72
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"
      kafka_config: { get_attr [ kafka_setup, value ] }

  hdfs_node_0:
    type: http://artifacts.pd.infn.it/templates/SMACT/heat/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: "spark hadoop"
      node_id: 80
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"

  hdfs_node_1:
    type: http://artifacts.pd.infn.it/templates/SMACT/heat/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: "spark hadoop"
      node_id: 81
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"

  hdfs_node_2:
    type: http://artifacts.pd.infn.it/templates/SMACT/heat/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      lan_net_id: { get_param: lan_id }
      lan_subnet_name: { get_param: lan_subnet_name }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: "spark hadoop"
      node_id: 82
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"

  nifi_setup:
    type: OS::Heat::Value
    properties:
      type: json
      value: {
        "administrative.yield.duration" : "30 sec",
        "bored.yield.duration" : "10 millis",
        "cluster.firewall.file" : "",
        "cluster.flow.election.max.candidates" : "",
        "cluster.flow.election.max.wait.time" : "5 mins",
        "cluster.is.node" : "false",
        "cluster.node.address" : "",
        "cluster.node.connection.timeout" : "5 sec",
        "cluster.node.event.history.size" : "25",
        "cluster.node.max.concurrent.requests" : "100",
        "cluster.node.protocol.max.threads" : "50",
        "cluster.node.protocol.port" : "",
        "cluster.node.protocol.threads" : "10",
        "cluster.node.read.timeout" : "5 sec",
        "cluster.protocol.heartbeat.interval" : "5 sec",
        "cluster.protocol.is.secure" : "true",
        "components.status.repository.buffer.size" : "1440",
        "components.status.snapshot.frequency" : "1 min",
        "content.claim.max.appendable.size" : "1 MB",
        "content.claim.max.flow.files" : "100",
        "content.repository.always.sync" : "false",
        "content.repository.archive.enabled" : "true",
        "content.repository.archive.max.retention.period" : "12 hours",
        "content.repository.archive.max.usage.percentage" : "50%",
        "flow.configuration.archive.enabled" : "true",
        "flow.configuration.archive.max.count" : "",
        "flow.configuration.archive.max.storage" : "500 MB",
        "flow.configuration.archive.max.time" : "30 days",
        "flowcontroller.autoResumeState" : "true",
        "flowcontroller.graceful.shutdown.period" : "10 sec",
        "flowfile.repository.always.sync" : "false",
        "flowfile.repository.checkpoint.interval" : "2 mins",
        "flowfile.repository.partitions" : "256",
        "flowservice.writedelay.interval" : "500 ms",
        "h2.url.append" : ";LOCK_TIMEOUT" : "25000;WRITE_DELAY" : "0;AUTO_SERVER" : "FALSE",
        "kerberos.krb5.file" : "",
        "kerberos.service.keytab.location" : "",
        "kerberos.service.principal" : "",
        "kerberos.spnego.authentication.expiration" : "12 hours",
        "kerberos.spnego.keytab.location" : "",
        "kerberos.spnego.principal" : "",
        "provenance.repository.always.sync" : "false",
        "provenance.repository.buffer.size" : "100000",
        "provenance.repository.compress.on.rollover" : "true",
        "provenance.repository.concurrent.merge.threads" : "2",
        "provenance.repository.debug.frequency" : "1_000_000",
        "provenance.repository.encryption.key" : "",
        "provenance.repository.encryption.key.id" : "",
        "provenance.repository.encryption.key.provider.implementation" : "",
        "provenance.repository.encryption.key.provider.location" : "",
        "provenance.repository.indexed.attributes" : "",
        "provenance.repository.indexed.fields" : "EventType, FlowFileUUID, Filename, ProcessorID, Relationship",
        "provenance.repository.index.shard.size" : "500 MB",
        "provenance.repository.index.threads" : "2",
        "provenance.repository.journal.count" : "16",
        "provenance.repository.max.attribute.length" : "65536",
        "provenance.repository.max.storage.size" : "1 GB",
        "provenance.repository.max.storage.time" : "24 hours",
        "provenance.repository.query.threads" : "2",
        "provenance.repository.rollover.size" : "100 MB",
        "provenance.repository.rollover.time" : "30 secs",
        "provenance.repository.warm.cache.frequency" : "1 hour",
        "queue.backpressure.count" : "10000",
        "queue.backpressure.size" : "1 GB",
        "queue.swap.threshold" : "20000",
        "remote.contents.cache.expiration" : "30 secs",
        "remote.input.host" : "",
        "remote.input.http.enabled" : "true",
        "remote.input.http.transaction.ttl" : "30 sec",
        "remote.input.secure" : "true",
        "remote.input.socket.port" : "",
        "security.keystoreType" : "JKS",
        "security.needClientAuth" : "false",
        "security.ocsp.responder.certificate" : "",
        "security.ocsp.responder.url" : "",
        "security.truststore" : "/etc/pki/java/cacerts",
        "security.truststorePasswd" : "changeit",
        "security.truststoreType" : "JKS",
        "security.user.authorizer" : "managed-authorizer",
        "security.user.knox.audiences" : "",
        "security.user.knox.cookieName" : "hadoop-jwt",
        "security.user.knox.publicKey" : "",
        "security.user.knox.url" : "",
        "security.user.login.identity.provider" : "",
        "security.user.oidc.connect.timeout" : "5 secs",
        "security.user.oidc.preferred.jwsalgorithm" : "",
        "security.user.oidc.read.timeout" : "5 secs",
        "sensitive.props.additional.keys" : "",
        "sensitive.props.algorithm" : "PBEWITHMD5AND256BITAES-CBC-OPENSSL",
        "sensitive.props.key.protected" : "",
        "sensitive.props.provider" : "BC",
        "state.management.embedded.zookeeper.start" : "false",
        "state.management.provider.cluster" : "zk-provider",
        "state.management.provider.local" : "local-provider",
        "swap.in.period" : "5 sec",
        "swap.in.threads" : "1",
        "swap.out.period" : "5 sec",
        "swap.out.threads" : "4",
        "ui.autorefresh.interval" : "30 sec",
        "ui.banner.text" : "",
        "variable.registry.properties" : "",
        "web.http.host" : "",
        "web.http.network.interface.default" : "",
        "web.http.port" : "",
        "web.https.host" : "0.0.0.0",
        "web.https.network.interface.default" : "",
        "web.https.port" : "8443",
        "web.jetty.threads" : "200",
        "web.max.header.size" : "16 KB",
        "web.proxy.context.path" : "",
        "web.proxy.host" : "",
        "zookeeper.auth.type" : "",
        "zookeeper.connect.string" : "",
        "zookeeper.connect.timeout" : "3 secs",
        "zookeeper.kerberos.removeHostFromPrincipal" : "",
        "zookeeper.kerberos.removeRealmFromPrincipal" : "",
        "zookeeper.root.node" : "/nifi",
        "zookeeper.session.timeout" : "3 secs"
      }

  nifi_node:
    type: http://artifacts.pd.infn.it/templates/SMACT/heat/multi_node.yaml
    properties:
      image_to_use: { get_param: image_to_use }
      flavor_to_use: { get_param: flavor_to_use }
      key_name_user: { get_param: key_name_user }
      root_pw: { get_resource: root_pw }
      host_name: { get_param: host_name }
      wan_net_id: { get_param: wan_id }
      wan_subnet_name: { get_param: wan_subnet_name }
      wan_net_ippref: { get_param: wan_ipprefix }
      lan_net_ippref: { get_param: lan_ipprefix }
      nameserver_list: { get_param: nameserver_list }
      sec_group_id: { get_resource: secgroup_bigstack_sg }
      node_type: nifi
      node_id: 90
      spark_ids: "80 81 82"
      kafka_ids: "70 71 72"
      admin_id: { get_param: nifi_admin_id }
      fip_id: { get_param: nifi_fip_id }
      oidc_client_id: { get_param: oidc_client_id }
      oidc_client_secret: { get_param: oidc_client_secret }
      oidc_idp_url: { get_param: oidc_idp_url }
      nifi_config: { get_attr [ nifi_setup, value ] }

outputs:

  root_pw:
    description: root pwd to access to all VMs in spark cluster
    value: { get_resource: root_pw }

  spark_0_id:
    description: ID of the server instance
    value: { get_attr: [ hdfs_node_0, instance_id ] }

  spark_1_id:
    description: ID of the server instance
    value: { get_attr: [ hdfs_node_1, instance_id ] }

  spark_2_id:
    description: ID of the server instance
    value: { get_attr: [ hdfs_node_2, instance_id ] }


