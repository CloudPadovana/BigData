heat_template_version: 2017-02-24

parameters:
  image_to_use:
    type: string
    label: Image name or ID
    description: Image used for all nodes in the kafka cluster

  flavor_to_use:
    type: string
    label: Flavor name 
    description: Flavor used for all nodes in the kafka cluster

  key_name_user:
    type: string
    label: Public ssh key of one user.
    description: Public ssh key of one user.

  root_pw:
    type: string
    label: Root password
    description: Root password

  keystore_pw:
    type: string
    label: Keystore password
    description: Keystore password

  admin_id:
    type: string
    label: Identity of the administrator
    description: Identity of the administrator

  avail_zone:
    type: string
    label: Availability Zone
    description: Availability Zone for the cluster
    default: "nova"

  net_host_prefix:
    type: string
    label: Prefix for the hostname of the cluster nodes
    description: Prefix for the hostname of the cluster nodes.
    default: "cld-smact"

  tenant_net_id:
    type: string
    label: Network ID of the tenant
    description: This parameter has been set with the id of the tenant network

  tenant_subnet_name:
    type: string
    label: Sub network of the tenant
    description: This parameter has been set with the name of the tenant sub network.

  nameserver_list:
    type: string
    label: Name server ip list
    description: Name server ip list

  sec_group_id:
    type: string
    label: Security Group ID
    description: Security Group ID

  node_id:
    type: number
    label: Node ID
    description: Node ID
    default: 1

  fixed_ip:
    type: string
    label: Fixed ip for the current host
    description: Fixed ip for the current host

  fip_id:
    type: string
    label: ID of the floating ip for the current host
    description: ID of the floating ip for the current host

  oidc_client_id:
    type: string
    label: OpenID Connect Client ID
    description: OpenID Connect Client ID
    default: ""

  oidc_client_secret:
    type: string
    label: OpenID Connect Client secret
    description: OpenID Connect Client secret
    default: ""

  oidc_idp_url:
    type: string
    label: OpenID Connect IdP metadata
    description: OpenID Connect IdP metadata
    default: ""

resources:

  secprop_pw:
   type: OS::Heat::RandomString
   properties:
      length: 8 

  secgroup_bigstack_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Access to big data stack services for all VM in this security group"
      name: "secgroup-bigdata-stack"
      rules: [
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 22, "port_range_max": 22, "remote_mode": remote_ip_prefix, "protocol": TCP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 5050, "port_range_max": 5050, "remote_mode": remote_ip_prefix, "protocol": TCP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 8080, "port_range_max": 8080, "remote_mode": remote_ip_prefix, "protocol": TCP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 8443, "port_range_max": 8443, "remote_mode": remote_ip_prefix, "protocol": TCP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 4400, "port_range_max": 4400, "remote_mode": remote_ip_prefix, "protocol": TCP}, 
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 2181, "port_range_max": 2181, "remote_mode": remote_ip_prefix, "protocol": TCP}, 
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 2888, "port_range_max": 2888, "remote_mode": remote_ip_prefix, "protocol": TCP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 3888, "port_range_max": 3888, "remote_mode": remote_ip_prefix, "protocol": TCP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 9000, "port_range_max": 9000, "remote_mode": remote_ip_prefix, "protocol": TCP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 9092, "port_range_max": 9092, "remote_mode": remote_ip_prefix, "protocol": TCP}, 
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "port_range_min": 50010, "port_range_max": 50090, "remote_mode": remote_ip_prefix, "protocol": TCP},
        {"direction": ingress, "remote_ip_prefix": 0.0.0.0/0, "remote_mode": remote_ip_prefix, "protocol": ICMP}
      ]

  nifi_port:
    type: OS::Neutron::Port
    properties:
      name:
        str_replace:
            template: "nifi-port-$NIFI_ID"
            params:
                $NIFI_ID: { get_param: node_id }
      network_id: { get_param: tenant_net_id }
      fixed_ips:
        - { ip_address: { get_param: fixed_ip }, subnet: { get_param: tenant_subnet_name } }
      security_groups: [ { get_resource: secgroup_bigstack_sg }, ]

  nifi_fip_ass:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_param: fip_id }
      port_id: { get_resource: nifi_port }

  nifi_instance:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
            template: "nifi-instance-$NIFI_ID"
            params:
                $NIFI_ID: { get_param: node_id }
      key_name: { get_param: key_name_user }
      image: { get_param: image_to_use } 
      flavor: { get_param: flavor_to_use }
      admin_pass: { get_param: root_pw }
      networks:
        - port: { get_resource: nifi_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            hostnamectl set-hostname $HOST_PRE-0$HOST_NUMBER.pd.infn.it
            cat > /etc/hosts << EOF
            127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
            ::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
            $IP_FIX_NODE1    $HOST_PRE-01.pd.infn.it    $HOST_PRE-01
            EOF
            cat > /etc/resolv.conf << EOF
            search smact.pd.infn.it pd.infn.it
            nameserver $IP_NS_LIST
            EOF
            yum -y install epel-release yum-priorities vim-enhanced wget java-1.8.0-openjdk
            wget -O /tmp/nifi-1.7.1-bin.tar.gz http://artifacts.pd.infn.it/packages/SMACT/misc/nifi-1.7.1-bin.tar.gz
            useradd bigdatausr
            mkdir -p $BIGDATA_WD
            chown bigdatausr.bigdatausr $BIGDATA_WD
            runuser -s /bin/bash -c "tar -C $BIGDATA_WD -zxf /tmp/nifi-1.7.1-bin.tar.gz" -- bigdatausr
            mv $BIGDATA_WD/nifi-1.7.1 $BIGDATA_WD/nifi
            cat > $BIGDATA_WD/nifi/conf/nifi.properties << EOF
            #
            # Generated by HEAT
            #
            nifi.administrative.yield.duration=30 sec
            nifi.authorizer.configuration.file=$BIGDATA_WD/nifi/conf/authorizers.xml
            nifi.bored.yield.duration=10 millis
            nifi.cluster.firewall.file=
            nifi.cluster.flow.election.max.candidates=
            nifi.cluster.flow.election.max.wait.time=5 mins
            nifi.cluster.is.node=false
            nifi.cluster.node.address=
            nifi.cluster.node.connection.timeout=5 sec
            nifi.cluster.node.event.history.size=25
            nifi.cluster.node.max.concurrent.requests=100
            nifi.cluster.node.protocol.max.threads=50
            nifi.cluster.node.protocol.port=
            nifi.cluster.node.protocol.threads=10
            nifi.cluster.node.read.timeout=5 sec
            nifi.cluster.protocol.heartbeat.interval=5 sec
            nifi.cluster.protocol.is.secure=true
            nifi.components.status.repository.buffer.size=1440
            nifi.components.status.repository.implementation=org.apache.nifi.controller.status.history.VolatileComponentStatusRepository
            nifi.components.status.snapshot.frequency=1 min
            nifi.content.claim.max.appendable.size=1 MB
            nifi.content.claim.max.flow.files=100
            nifi.content.repository.always.sync=false
            nifi.content.repository.archive.enabled=true
            nifi.content.repository.archive.max.retention.period=12 hours
            nifi.content.repository.archive.max.usage.percentage=50%
            nifi.content.repository.directory.default=$BIGDATA_WD/nifi/content_repository
            nifi.content.repository.implementation=org.apache.nifi.controller.repository.FileSystemRepository
            nifi.content.viewer.url=../nifi-content-viewer/
            nifi.database.directory=./database_repository
            nifi.documentation.working.directory=$BIGDATA_WD/nifi/work/docs/components
            nifi.flow.configuration.archive.dir=$BIGDATA_WD/nifi/conf/archive/
            nifi.flow.configuration.archive.enabled=true
            nifi.flow.configuration.archive.max.count=
            nifi.flow.configuration.archive.max.storage=500 MB
            nifi.flow.configuration.archive.max.time=30 days
            nifi.flow.configuration.file=./conf/flow.xml.gz
            nifi.flowcontroller.autoResumeState=true
            nifi.flowcontroller.graceful.shutdown.period=10 sec
            nifi.flowfile.repository.always.sync=false
            nifi.flowfile.repository.checkpoint.interval=2 mins
            nifi.flowfile.repository.directory=$BIGDATA_WD/nifi/flowfile_repository
            nifi.flowfile.repository.implementation=org.apache.nifi.controller.repository.WriteAheadFlowFileRepository
            nifi.flowfile.repository.partitions=256
            nifi.flowfile.repository.wal.implementation=org.apache.nifi.wali.SequentialAccessWriteAheadLog
            nifi.flowservice.writedelay.interval=500 ms
            nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE
            nifi.kerberos.krb5.file=
            nifi.kerberos.service.keytab.location=
            nifi.kerberos.service.principal=
            nifi.kerberos.spnego.authentication.expiration=12 hours
            nifi.kerberos.spnego.keytab.location=
            nifi.kerberos.spnego.principal=
            nifi.login.identity.provider.configuration.file=$BIGDATA_WD/nifi/conf/login-identity-providers.xml
            nifi.nar.library.directory=$BIGDATA_WD/nifi/lib
            nifi.nar.working.directory=$BIGDATA_WD/nifi/work/nar/
            nifi.provenance.repository.always.sync=false
            nifi.provenance.repository.buffer.size=100000
            nifi.provenance.repository.compress.on.rollover=true
            nifi.provenance.repository.concurrent.merge.threads=2
            nifi.provenance.repository.debug.frequency=1_000_000
            nifi.provenance.repository.directory.default=$BIGDATA_WD/nifi/provenance_repository
            nifi.provenance.repository.encryption.key=
            nifi.provenance.repository.encryption.key.id=
            nifi.provenance.repository.encryption.key.provider.implementation=
            nifi.provenance.repository.encryption.key.provider.location=
            nifi.provenance.repository.implementation=org.apache.nifi.provenance.PersistentProvenanceRepository
            nifi.provenance.repository.indexed.attributes=
            nifi.provenance.repository.indexed.fields=EventType, FlowFileUUID, Filename, ProcessorID, Relationship
            nifi.provenance.repository.index.shard.size=500 MB
            nifi.provenance.repository.index.threads=2
            nifi.provenance.repository.journal.count=16
            nifi.provenance.repository.max.attribute.length=65536
            nifi.provenance.repository.max.storage.size=1 GB
            nifi.provenance.repository.max.storage.time=24 hours
            nifi.provenance.repository.query.threads=2
            nifi.provenance.repository.rollover.size=100 MB
            nifi.provenance.repository.rollover.time=30 secs
            nifi.provenance.repository.warm.cache.frequency=1 hour
            nifi.queue.backpressure.count=10000
            nifi.queue.backpressure.size=1 GB
            nifi.queue.swap.threshold=20000
            nifi.remote.contents.cache.expiration=30 secs
            nifi.remote.input.host=
            nifi.remote.input.http.enabled=true
            nifi.remote.input.http.transaction.ttl=30 sec
            nifi.remote.input.secure=true
            nifi.remote.input.socket.port=
            nifi.security.keyPasswd=$KEYSTORE_PW
            nifi.security.keystore=$BIGDATA_WD/nifi/conf/service.jks
            nifi.security.keystorePasswd=$KEYSTORE_PW
            nifi.security.keystoreType=JKS
            nifi.security.needClientAuth=false
            nifi.security.ocsp.responder.certificate=
            nifi.security.ocsp.responder.url=
            nifi.security.truststore=/etc/pki/java/cacerts
            nifi.security.truststorePasswd=changeit
            nifi.security.truststoreType=JKS
            nifi.security.user.authorizer=managed-authorizer
            nifi.security.user.knox.audiences=
            nifi.security.user.knox.cookieName=hadoop-jwt
            nifi.security.user.knox.publicKey=
            nifi.security.user.knox.url=
            nifi.security.user.login.identity.provider=
            nifi.security.user.oidc.client.id=$OIDC_C_ID
            nifi.security.user.oidc.client.secret=$OIDC_C_SEC
            nifi.security.user.oidc.connect.timeout=5 secs
            nifi.security.user.oidc.discovery.url=$OIDC_IDP
            nifi.security.user.oidc.preferred.jwsalgorithm=
            nifi.security.user.oidc.read.timeout=5 secs
            nifi.sensitive.props.additional.keys=
            nifi.sensitive.props.algorithm=PBEWITHMD5AND256BITAES-CBC-OPENSSL
            nifi.sensitive.props.key=$SECPROP_PW
            nifi.sensitive.props.key.protected=
            nifi.sensitive.props.provider=BC
            nifi.state.management.configuration.file=$BIGDATA_WD/nifi/conf/state-management.xml
            nifi.state.management.embedded.zookeeper.properties=$BIGDATA_WD/nifi/conf/zookeeper.properties
            nifi.state.management.embedded.zookeeper.start=false
            nifi.state.management.provider.cluster=zk-provider
            nifi.state.management.provider.local=local-provider
            nifi.swap.in.period=5 sec
            nifi.swap.in.threads=1
            nifi.swap.manager.implementation=org.apache.nifi.controller.FileSystemSwapManager
            nifi.swap.out.period=5 sec
            nifi.swap.out.threads=4
            nifi.templates.directory=$BIGDATA_WD/nifi/conf/templates
            nifi.ui.autorefresh.interval=30 sec
            nifi.ui.banner.text=
            nifi.variable.registry.properties=
            nifi.web.http.host=
            nifi.web.http.network.interface.default=
            nifi.web.http.port=
            nifi.web.https.host=0.0.0.0
            nifi.web.https.network.interface.default=
            nifi.web.https.port=8443
            nifi.web.jetty.threads=200
            nifi.web.jetty.working.directory=$BIGDATA_WD/nifi/work/jetty
            nifi.web.max.header.size=16 KB
            nifi.web.proxy.context.path=
            nifi.web.proxy.host=
            nifi.web.war.directory=$BIGDATA_WD/nifi/lib
            nifi.zookeeper.auth.type=
            nifi.zookeeper.connect.string=
            nifi.zookeeper.connect.timeout=3 secs
            nifi.zookeeper.kerberos.removeHostFromPrincipal=
            nifi.zookeeper.kerberos.removeRealmFromPrincipal=
            nifi.zookeeper.root.node=/nifi
            nifi.zookeeper.session.timeout=3 secs
            EOF
            cat > $BIGDATA_WD/nifi/conf/authorizers.xml << EOF
            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
            <authorizers>
              <userGroupProvider>
                <identifier>file-user-group-provider</identifier>
                <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
                <property name="Users File">./conf/users.xml</property>
                <property name="Legacy Authorized Users File"></property>
                <property name="Initial User Identity 1">$ADMIN_ID</property>
              </userGroupProvider>
              <accessPolicyProvider>
                <identifier>file-access-policy-provider</identifier>
                <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
                <property name="User Group Provider">file-user-group-provider</property>
                <property name="Authorizations File">./conf/authorizations.xml</property>
                <property name="Initial Admin Identity">$ADMIN_ID</property>
                <property name="Legacy Authorized Users File"></property>
                <property name="Node Identity 1"></property>
              </accessPolicyProvider>
              <authorizer>
                <identifier>managed-authorizer</identifier>
                <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
                <property name="Access Policy Provider">file-access-policy-provider</property>
              </authorizer>
            </authorizers>
            EOF
          params:
            $IP_FIX_NODE1: { get_param: fixed_ip }
            $IP_NS_LIST:   { get_param: nameserver_list }
            $HOST_NUMBER:  { get_param: node_id }
            $HOST_PRE:     { get_param: net_host_prefix }
            $SECPROP_PW:   { get_resource: secprop_pw }
            $KEYSTORE_PW:  { get_param: keystore_pw }
            $ADMIN_ID:     { get_param: admin_id }
            $OIDC_C_ID:    { get_param: oidc_client_id }
            $OIDC_C_SEC:   { get_param: oidc_client_secret }
            $OIDC_IDP:     { get_param: oidc_idp_url }
            $BIGDATA_WD:   "/opt/bigdata"

#
# Post-inst operations:
# Install the keystore in /opt/bigdata/nifi/conf/service.jks:
#   the keystore pwd MUST BE equal to the root_pwd
#   the owner MUST BE bigdatausr.bigdatausr
# Run "/opt/bigdata/nifi/bin/nifi.sh start" as bigdatausr
#

